/*
 * File DependencyView.java.
 * Created by Donat Csikos<dcsikos@cern.ch> at 9 Mar 2012.
 *
 * Copyright CERN 2012, All Rights Reserved.
 */
package cern.devtools.deps.eclipse.ui.views;

import java.util.Collection;

import org.eclipse.core.runtime.Platform;
import org.eclipse.jface.action.IMenuManager;
import org.eclipse.jface.action.IToolBarManager;
import org.eclipse.jface.action.MenuManager;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.SashForm;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.events.MouseAdapter;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.Tree;
import org.eclipse.ui.IViewSite;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.model.WorkbenchContentProvider;
import org.eclipse.ui.model.WorkbenchLabelProvider;
import org.eclipse.ui.part.ViewPart;

import cern.devtools.deps.domain.CodeElement;
import cern.devtools.deps.domain.Dependency;
import cern.devtools.deps.eclipse.ui.LoggingUtil;
import cern.devtools.deps.eclipse.ui.handlers.ShowSourceHandler;
import cern.devtools.deps.eclipse.ui.tree.TreeBuilder;
import cern.devtools.deps.eclipse.ui.tree.TreeItem;
import cern.devtools.deps.eclipse.ui.tree.TreeItemAdapterFactory;

/**
 * View for displaying queried dependencies.
 * 
 * @author Donat Csikos <dcsikos@cern.ch>
 */
public class DependencyView extends ViewPart {

	/**
	 * Default grouping applied in the view.
	 */
	public static final GroupingOptions DEFAULT_GROUPING = GroupingOptions.GROUP_BY_PRODUCT;

	/**
	 * Viewer's id.
	 */
	public static final String ID = "cern.devtools.eclipse.dependency.views.result";

	/**
	 * Id of the context menu.
	 */
	public static final String CONTEXT_MENU_ID = "cern.devtools.deps.eclipse.views.dependencyview.popup";

	/**
	 * Adapter factory for register and unregister in the init and dispose method.
	 */
	private final TreeItemAdapterFactory adapterFactory = new TreeItemAdapterFactory();

	/**
	 * The composite holding the details for the selected item from the dependency tree.
	 */
	private DependencyDetailsComposite details;

	/**
	 * Stores the type of grouping in the treeviewer.
	 */
	private GroupingOptions grouping = DEFAULT_GROUPING;

	/**
	 * Composite widget for storing the history.
	 */
	private HistoryCombo historyCombo;

	/**
	 * TreeViewer, which stores the result of the dependency query.
	 */
	private TreeViewer treeViewer;

	public DependencyView() {
		// Nothing to do here, the real initialisation happens in the createPartControl() function.
	}

	/**
	 * Change the grouping of the view.
	 * 
	 * @param grouping The grouping strategy to display.
	 */
	public void changeGrouping(GroupingOptions grouping) {
		// store settings
		this.grouping = grouping;

		// acquire previous results
		if (historyCombo.isEmpty()) {
			return;
		}

		// Get the result and display it with the provided grouping.
		CodeElement qi = historyCombo.currentQueriedItem();
		Collection<Dependency> rs = historyCombo.currentResultSet();
		showDependency(qi, rs, 0);
	}

	/**
	 * Create contents of the view part. Note. Generated by WindowBuilder 1.2.
	 * 
	 * @param parent {@inheritDoc}.
	 */
	@Override
	public void createPartControl(Composite parent) {
		Composite container = new Composite(parent, SWT.NONE);
		GridLayout gl_container = new GridLayout(1, false);
		gl_container.verticalSpacing = 0;
		container.setLayout(gl_container);
		{
			historyCombo = new HistoryCombo(container, SWT.NONE);
			historyCombo.setLayout(new GridLayout(2, false));
			GridData gd_composite = new GridData(SWT.LEFT, SWT.FILL, false, false, 1, 1);
			gd_composite.widthHint = 577;
			gd_composite.heightHint = 68;
			historyCombo.setLayoutData(gd_composite);
			{
				historyCombo.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
				historyCombo.addSelectionListenerToCombo(new SelectionAdapter() {
					@Override
					public void widgetSelected(SelectionEvent e) {
						showDependency(historyCombo.currentQueriedItem(), historyCombo.currentResultSet(), 0);
					}
				});
				historyCombo.addSelectionListenerToButton(new SelectionAdapter() {
					@Override
					public void widgetSelected(SelectionEvent e) {
						treeViewer.setInput(null);
					}
				});
			}
		}
		{
			Composite composite = new Composite(container, SWT.NONE);
			GridLayout gl_composite = new GridLayout(1, false);
			gl_composite.verticalSpacing = 0;
			composite.setLayout(gl_composite);
			composite.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
			{
				SashForm sashForm = new SashForm(composite, SWT.SMOOTH);
				sashForm.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
				{
					treeViewer = new TreeViewer(sashForm, SWT.BORDER);
					Tree tree = treeViewer.getTree();
					tree.setLinesVisible(true);
				}
				{
					ScrolledComposite scrolledComposite = new ScrolledComposite(sashForm, SWT.BORDER | SWT.H_SCROLL
							| SWT.V_SCROLL);
					scrolledComposite.setExpandHorizontal(true);
					scrolledComposite.setExpandVertical(true);
					{
						details = new DependencyDetailsComposite(scrolledComposite, SWT.NONE);
					}
					scrolledComposite.setContent(details);
					scrolledComposite.setMinSize(new Point(10, 110));
				}
				sashForm.setWeights(new int[] { 3, 1 });
			}

		}

		initializeToolBar();
		initializeMenu();
		initializeViewer();
	}

	/**
	 * Displays the incoming dependency tree in the treeview. This function is the entry point to display dependencies
	 * 
	 * @param selection The CodeElement which was queried for incoming dependencies.
	 * @param result The result graph returned by the server.
	 */
	public void displayNewDependency(CodeElement selection, Collection<Dependency> result) {
		historyCombo.add(selection, result);
		showDependency(selection, result, 1);
	}

	/**
	 * Updates the treeViewer
	 * 
	 * @param selection The CodeElement which was queried for incoming dependencies.
	 * @param result The result graph returned by the server.
	 * @param level The number of levels to be expanded by default in the treeViewer.
	 */
	private void showDependency(CodeElement selection, Collection<Dependency> result, int level) {
		TreeItem resultTreeRoot = TreeBuilder.buildTree(selection, result, grouping);
		treeViewer.setInput(resultTreeRoot);
		treeViewer.expandToLevel(2);
	}

	@Override
	public void dispose() {
		// unregister adapter
		Platform.getAdapterManager().unregisterAdapters(adapterFactory);
		// remove listener
		treeViewer.removeSelectionChangedListener(details.getChangeListener());
	}

	@Override
	public void init(IViewSite site) throws PartInitException {
		super.init(site);
		// register adapter
		Platform.getAdapterManager().registerAdapters(adapterFactory, TreeItem.class);
	}

	@Override
	public void setFocus() {
		if (treeViewer != null && !treeViewer.getControl().isDisposed()) {
			treeViewer.getTree().setFocus();
		}
	}

	/**
	 * Initialise the context menu of the view.
	 */
	private void initializeMenu() {
		IMenuManager menuManager = getViewSite().getActionBars().getMenuManager();
		menuManager.setRemoveAllWhenShown(true);
		MenuManager menuMgr = (MenuManager) menuManager;

		Menu menu = menuMgr.createContextMenu(treeViewer.getControl());
		treeViewer.getControl().setMenu(menu);
		getSite().registerContextMenu(CONTEXT_MENU_ID, menuMgr, treeViewer);
	}

	/**
	 * Adds the grouping action to the view's toolbar.
	 */
	private void initializeToolBar() {
		IToolBarManager toolbarManager = getViewSite().getActionBars().getToolBarManager();
		toolbarManager.add(new GroupResultAction(this));
	}

	/**
	 * Sets viewer to use workbench provided adapters.
	 */
	private void initializeViewer() {
		treeViewer.setContentProvider(new WorkbenchContentProvider());
		treeViewer.setLabelProvider(new WorkbenchLabelProvider());
		getSite().setSelectionProvider(treeViewer);
		treeViewer.addSelectionChangedListener(details.getChangeListener());
		treeViewer.getTree().addMouseListener(new MouseAdapter() {
			@Override
			public void mouseDoubleClick(MouseEvent e) {
				try {
					// WRONG. Should execute a command
					ShowSourceHandler.openSelectedJavaSource();
				} catch (Exception exc) {
					LoggingUtil.warnAndLog(exc);
				}
			}
		});
	}
}
